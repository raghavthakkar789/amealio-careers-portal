generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  jobs        Job[]

  @@map("departments")
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  password           String
  firstName          String
  lastName           String
  role               UserRole             @default(APPLICANT)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  dateOfBirth        DateTime?
  phoneNumber        String?
  address            String?
  linkedinProfile    String?
  profileImage       String?
  isActive           Boolean              @default(true)
  applicationHistory ApplicationHistory[] @relation("ApplicationHistoryPerformer")
  applications       Application[]
  adminReviews       InterviewReview[]    @relation("AdminReviewer")
  hrReviews          InterviewReview[]    @relation("HRReviewer")
  interviews         Interview[]
  hrJobs             Job[]                @relation("HRCreator")
  notifications      Notification[]

  @@map("users")
}

model Job {
  id                  String           @id @default(cuid())
  title               String
  departmentId        String
  summary             String?
  employmentTypes     EmploymentType[]
  applicationDeadline DateTime?
  requiredSkills      String[]
  isActive            Boolean          @default(true)
  isDraft             Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  createdById         String
  applications        Application[]
  jobDescription      JobDescription?
  createdBy           User             @relation("HRCreator", fields: [createdById], references: [id])
  department          Department       @relation(fields: [departmentId], references: [id])

  @@map("jobs")
}

model JobDescription {
  id               String   @id @default(cuid())
  jobId            String   @unique
  description      String
  responsibilities String[]
  requirements     String[]
  benefits         String[]
  location         String?
  remoteWork       Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  job              Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("job_descriptions")
}

model Application {
  id              String               @id @default(cuid())
  jobTitle        String
  employmentType  EmploymentType
  resumeUrl       String
  additionalFiles String[]
  coverLetter     String?
  status          ApplicationStatus    @default(PENDING)
  submittedAt     DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  applicantId     String
  jobId           String
  expectedSalary  String?              @default("No base")
  availability    String?
  education       String?
  experience      String?
  references      String?
  skills          String?
  history         ApplicationHistory[]
  applicant       User                 @relation(fields: [applicantId], references: [id])
  job             Job                  @relation(fields: [jobId], references: [id])
  interviews      Interview[]
  notifications   Notification[]

  @@map("applications")
}

model Interview {
  id            String            @id @default(cuid())
  scheduledAt   DateTime
  interviewType InterviewType
  meetingLink   String?
  location      String?
  status        InterviewStatus   @default(SCHEDULED)
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  applicationId String
  candidateId   String
  reviews       InterviewReview[]
  application   Application       @relation(fields: [applicationId], references: [id])
  candidate     User              @relation(fields: [candidateId], references: [id])
  notifications Notification[]

  @@map("interviews")
}

model InterviewReview {
  id              String    @id @default(cuid())
  technicalSkills Int
  communication   Int
  culturalFit     Int
  overallRating   Int
  comments        String
  recommendation  String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  interviewId     String
  hrReviewerId    String
  adminReviewerId String?
  adminReviewer   User?     @relation("AdminReviewer", fields: [adminReviewerId], references: [id])
  hrReviewer      User      @relation("HRReviewer", fields: [hrReviewerId], references: [id])
  interview       Interview @relation(fields: [interviewId], references: [id])

  @@map("interview_reviews")
}

model Notification {
  id            String       @id @default(cuid())
  title         String
  message       String
  type          String
  isRead        Boolean      @default(false)
  createdAt     DateTime     @default(now())
  userId        String
  applicationId String?
  interviewId   String?
  application   Application? @relation(fields: [applicationId], references: [id])
  interview     Interview?   @relation(fields: [interviewId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model EmailTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  subject   String
  body      String
  variables String[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_templates")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model ApplicationHistory {
  id              String             @id @default(cuid())
  applicationId   String
  fromStatus      ApplicationStatus?
  toStatus        ApplicationStatus
  action          String
  performedBy     String
  performedByName String
  performedByRole UserRole
  notes           String?
  createdAt       DateTime           @default(now())
  application     Application        @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  performer       User               @relation("ApplicationHistoryPerformer", fields: [performedBy], references: [id])

  @@map("application_history")
}

model HRRequest {
  id              String          @id @default(cuid())
  firstName       String
  lastName        String
  email           String          @unique
  phoneNumber     String?
  department      String?
  reason          String?
  status          HRRequestStatus @default(PENDING)
  requestedBy     String
  requestedByName String
  approvedBy      String?
  approvedByName  String?
  rejectionReason String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  approvedAt      DateTime?

  @@map("hr_requests")
}

enum UserRole {
  APPLICANT
  HR
  ADMIN
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  ACCEPTED
  REJECTED
  HIRED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum InterviewType {
  PHONE
  VIDEO
  IN_PERSON
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum HRRequestStatus {
  PENDING
  APPROVED
  REJECTED
}
